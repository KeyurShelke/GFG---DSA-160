Stock span problem
Difficulty: MediumAccuracy: 43.56%Submissions: 233K+Points: 4
The stock span problem is a financial problem where we have a series of daily price quotes for a stock and we need to calculate the span of stock price for all days. The span arr[i] of the stocks price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the given day is less than or equal to its price on the current day.

Examples:

Input: arr[] = [100, 80, 60, 70, 60, 75, 85]
Output: [1, 1, 1, 2, 1, 4, 6]
Explanation: Traversing the given input span 100 is greater than equal to 100 and there are no more elements behind it so the span is 1, 80 is greater than equal to 80 and smaller than 100 so the span is 1, 60 is greater than equal to 60 and smaller than 80 so the span is 1, 70 is greater than equal to 60,70 and smaller than 80 so the span is 2 and so on.  Hence the output will be 1 1 1 2 1 4 6.
Input: arr[] = [10, 4, 5, 90, 120, 80]
Output: [1, 1, 2, 4, 5, 1]
Explanation: Traversing the given input span 10 is greater than equal to 10 and there are no more elements behind it so the span is 1, 4 is greater than equal to 4 and smaller than 10 so the span is 1, 5 is greater than equal to 4,5 and smaller than 10 so the span is 2,  and so on. Hence the output will be 1 1 2 4 5 1.
Constraints:
1 ≤ arr.size()≤ 105
1 ≤ arr[i] ≤ 105

Table of Content

[Naive Approach] Using Nested Loop - O(n^2) Time and O(1) Space
[Expected Approach] Using Stack - O(n) Time and O(n) Space
[Naive Approach] Using Nested Loop - O(n^2) Time and O(1) Space
The idea is to use nested loops, where the outer loop iterates through the array to process each stock price. For each day, the inner loop moves leftward in the array, comparing previous prices and increasing the span count until a higher price is found or the beginning of the array is reached.




[Expected Approach] Using Stack - O(n) Time and O(n) Space
If we take a closer look at the problem, we can notice that we need to mainly find index of the previous greater element for every element. Let us understand in details.

We see that span[i] on the day i can be easily computed if we know the closest day preceding i, such that the price is greater than on that day than the price on the day i. If such a day exists, let’s call it greater(i), otherwise, we define greater(i) = -1
The span is now computed as span[i] = i - greater(i). See the following diagram

To implement this logic, we use a stack as an abstract data type to store the days i, greater(i), greater(greater(i)), and so on. The idea is to use a stack to find the span of stock prices. For each day, we remove indices from the stack while the current price is greater than or equal to the price at the top of the stack, as those day's prices cannot influence the span.

If the stack becomes empty, it means all previous prices are smaller, and the span is the current day index plus one.
Otherwise, the span is the difference between the current index and the top of the stack, which represents the last higher price's index.

Time Complexity : O(n). It seems more than O(n) at first look. If we take a closer look, we can observe that every element of array is added and removed from stack at most once. So there are total 2n operations at most. Assuming that a stack operation takes O(1) time, we can say that the time complexity is O(n).

Auxiliary Space : O(n) in worst case when all elements are sorted in decreasing order.

