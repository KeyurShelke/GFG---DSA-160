Given q queries, You task is to implement the following four functions for a stack:

push(x) – Insert an integer x onto the stack.
pop() – Remove the top element from the stack.
peek() - Return the top element from the stack. If the stack is empty, return -1.
getMin() – Retrieve the minimum element from the stack in O(1) time. If the stack is empty, return -1.
Each query can be one of the following:

1 x : Push x onto the stack.
2 : Pop the top element from the stack.
3: Return the top element from the stack. If the stack is empty, return -1.
4: Return the minimum element from the stack.
Examples:

Input: q = 7, queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]
Output: [3, 2, 1]
Explanation: 
push(2): Stack is [2]
push(3): Stack is [2, 3]
peek(): Top element is 3
pop(): Removes 3, stack is [2]
getMin(): Minimum element is 2
push(1): Stack is [2, 1]
getMin(): Minimum element is 1
Input: q = 4, queries = [[1, 4], [1, 2], [4], [3]]
Output: [2, 2]
Explanation: 
push(4): Stack is [4]
push(2): Stack is [4, 2]
getMin(): Minimum element is 2
peek(): Top element is 2
Input: q = 5, queries = [[1, 10], [4], [1, 5], [4], [2]]
Output: [10, 5]
Explanation: 
push(10): Stack is [10]
getMin(): Minimum element is 10
push(5): Stack is [10, 5]
getMin(): Minimum element is 5
pop(): Removes 5, stack is [10]
Constraints:
1 <= q <= 105
0 <= values on the stack <= 109

Table of Content

Using an Auxiliary Stack - O(1) Time and O(n) Space
Using a Pair in Stack - O(1) Time and O(n) Space
Without Extra Space- O(1) Time and O(1) Space
Using an Auxiliary Stack - O(1) Time and O(n) Space
Use two stacks: one to store actual stack elements and the other as an auxiliary stack to store minimum values. The idea is to do push() and pop() operations in such a way that the top of the auxiliary stack is always the minimum. Let us see how push() and pop() operations work.

Push(int x)

push x to the first stack (the stack with actual elements) 
compare x with the top element of the second stack (the auxiliary stack). Let the top element be y. 
If x is smaller than y then push x to the auxiliary stack. 
If x is greater than y then push y to the auxiliary stack.
int Pop()

pop the top element from the auxiliary stack. 
pop the top element from the actual stack and return it. Step 1 is necessary to make sure that the auxiliary stack is also updated for future operations.
int getMin()

Return the top element of the auxiliary stack.

Time Complexity: 

For insert operation: O(1) (As insertion 'push' in a stack takes constant time)
For delete operation: O(1) (As deletion 'pop' in a stack takes constant time)
For 'Get Min' operation: O(1) (As we have used an auxiliary stack which has it's top as the minimum element)
Auxiliary Space: O(n)

Using a Pair in Stack - O(1) Time and O(n) Space
This approach uses a stack where each element is stored as a pair: the element itself and the minimum value up to that point. When an element is pushed, the minimum is updated. The getMin() function directly accesses the minimum value from the top of the stack in constant time, ensuring that both push(), pop(), and getMin() operations are O(1). This approach efficiently tracks the minimum value without needing to traverse the stack.

Without Extra Space- O(1) Time and O(1) Space
The idea is to use a variable minEle to track the minimum element in the stack. Instead of storing the actual value of minEle in the stack, we store a modified value when pushing an element smaller than minEle. This allows retrieving the previous minimum in O(1) time and space.

Operations

Push(x)
If the stack is empty, push x and set minEle = x.
If x >= minEle, push x normally.
If x < minEle, push 2*x - minEle and update minEle = x (this encodes the previous min).
Pop()
Remove the top element.
If the removed element is >= minEle, no change in minEle.
If the removed element is < minEle, update minEle = 2*minEle - top (decoding the previous min).
Peek()
Returns minEle if the top is modified (encoded) or top otherwise.
getMin()
Returns minEle, the current minimum in O(1) time.

How does this approach work? 

When the element to be inserted is less than minEle, we insert "2x - minEle". The important thing to note is, that 2x - minEle will always be less than x (proved below), i.e., new minEle and while popping out this element we will see that something unusual has happened as the popped element is less than the minEle. So we will be updating minEle.

How 2*x - minEle is less than x in push()? 

x < minEle which means x - minEle < 0 

// Adding x on both sides
x - minEle + x < 0 + x 
2*x - minEle < x 
We can conclude 2*x - minEle < new minEle 

While popping out, if we find the element(y) less than the current minEle, we find the new minEle = 2*minEle - y

How previous minimum element, prevMinEle is, 2*minEle - y
in pop() is y the popped element?

 // We pushed y as 2x - prevMinEle. Here 
// prevMinEle is minEle before y was inserted

y = 2*x - prevMinEle  

// Value of minEle was made equal to x
minEle = x

new minEle = 2 * minEle - y 
                   = 2*x - (2*x - prevMinEle)
                   = prevMinEle // This is what we wanted