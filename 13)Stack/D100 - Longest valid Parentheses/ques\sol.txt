Given a string s consisting of opening and closing parenthesis '(' and ')'. Find the length of the longest valid parenthesis substring.

A parenthesis string is valid if:

For every opening parenthesis, there is a closing parenthesis.
The closing parenthesis must be after its opening parenthesis.
Examples :

Input: s = "((()"
Output: 2
Explanation: The longest valid parenthesis substring is "()".
Input: s = ")()())"
Output: 4
Explanation: The longest valid parenthesis substring is "()()".
Input: s = "())()"
Output: 2
Explanation: The longest valid parenthesis substring is "()".
Constraints:
1 ≤ s.size() ≤ 106  
s consists of '(' and ')' only

Table of Content

[Expected Approach - 1] Using Stack - O(n) Time and O(n) Space:
[Expected Approach - 2] Using DP - O(n) Time and O(n) Space:
[Expected Approach - 3] Using Two Traversals - O(n) Time and O(1) Space:
[Expected Approach - 1] Using Stack - O(n) Time and O(n) Space
The idea is to use a stack-based approach to track the indices of unmatched open parentheses. It determines the length of valid (well-formed) parentheses substrings by keeping track of the position of the last unmatched closing parenthesis or the starting position of a valid substring.

Follow the steps below to solve the problem:

For every opening parenthesis, we push its index onto the stack.
For every closing parenthesis, we pop the stack.
If the stack becomes empty after popping, it means we've encountered an unmatched closing parenthesis, so we push the current index to serve as a base for the next potential valid substring.
If the stack is not empty, we calculate the length of the valid substring by subtracting the index at the top of the stack from the current index.
A variable maxLength keeps track of the maximum length of valid parentheses encountered during the traversal.



[Expected Approach - 2] Using DP - O(n) Time and O(n) Space
The idea is to solve this problem using dynamic programming (DP) where dp[i] represents the length of the longest valid parentheses substring ending at index i. If a valid substring ends at i, we calculate and store the length of that substring in dp[i].

Follow the steps below to solve the problem:

If we encounter an opening parenthesis, we can't form a valid substring yet, so we move to the next character.
If we encounter a closing parenthesis, we check the previous character to determine if it forms a valid substring.
If the previous character is '(', we have a valid pair, so dp[i] = dp[i-2] + 2 (if i-2 is valid).
If the previous character is ')', check if the substring before it forms a valid substring. We use dp[i-1] to determine where the valid substring might start.
Also, store the maximum length of valid parentheses during the traversal.

[Expected Approach - 3] Using Two Traversals - O(n) Time and O(1) Space
The idea is to solve the problem using two traversals of the string, one from left to right and one from right to left, while keeping track of the number of open and close parentheses using two counters: open and close.

Why there is a Two Traversals?

Left to right traversal ensures that every valid substring that ends at the rightmost closing parenthesis is counted.
Right to left traversal ensures that every valid substring that starts from the leftmost opening parenthesis is counted.
Follow the steps below to solve the problem:

Left to Right Traversal:
Use two counters, say open to count the number of opening parentheses '(', and close to count the number of closing parentheses ')'.
For each character, if it's '(', increment open else increment close.
Whenever open == close, we have found a valid substring, and we calculate the length: 2 * close. Keep track of the maximum valid length.
If at any point close exceeds open, it means we have too many closing parentheses, and we reset both open and close to 0.
Right to Left Traversal:
Similarly, use open and close counters again.
For each character, if it's '(', increment open else increment close.
Again, whenever open == close, update the maximum valid length.
If open exceeds close, reset both counters to 0.



