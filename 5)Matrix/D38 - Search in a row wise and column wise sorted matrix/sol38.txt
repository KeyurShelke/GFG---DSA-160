Table of Content

[Naive Approach] Comparing with all elements - O(n*m) Time and O(1) Space
[Better Approach] Binary Search - O(n*logm) Time and O(1) Space:
[Expected Approach] Eliminating rows or columns - O(n + m) Time and O(1) Space:



[Naive Approach] Comparing with all elements - O(n*m) Time and O(1) Space
The simple idea is to traverse the complete matrix and search for the target element. If the target element is found, return true. Otherwise, return false.

[Better Approach] Binary Search - O(n*logm) Time and O(1) Space:
To optimize the above approach we are going to use the Binary Search algorithm.
The problem specifies that each row in the given matrix is sorted in ascending order. Instead of searching each column sequentially, we can efficiently apply 
Binary Search on each row to determine if the target is present.

[Expected Approach] Eliminating rows or columns - O(n + m) Time and O(1) Space:
The idea is to remove a row or column in each comparison until an element is found. Start searching from the top-right corner of the matrix. There are 3 possible 
cases:

x is greater than the current element: This ensures that all the elements in the current row are smaller than the given number as the pointer is already at the 
right-most element and the row is sorted. Thus, the entire row gets eliminated and continues the search from the next row.
x is smaller than the current element: This ensures that all the elements in the current column are greater than the given number. Thus, the entire column gets 
eliminated and continues the search from the previous column, i.e. the column on the immediate left.
The given number is equal to the current number: This will end the search.