There are n gas stations along a circular tour, where the amount of gas at the ith gas station is gas[i]. You have a car with a gas tank of unlimited capacity and it costs cost[i] of gas to travel from the ith station to its next station. You begin the journey with an empty tank at one of the gas station.
Given two integer arrays gas[] and cost[], the task is to return the starting gas station's index if you want to travel around the circular tour once in the clockwise direction, otherwise return -1.

Note: If a solution exists, it is guaranteed to be unique.

Examples:

Input: gas[] = [4, 5, 7, 4], cost[] = [6, 6, 3, 5]
Output: 2
Explanation: Start at gas station at index 2 and fill up with 7 units of gas. Your tank = 0 + 7 = 7

Travel to station 3. Available gas = (7 - 3 + 4) = 8.
Travel to station 0. Available gas = (8 - 5 + 4) = 7.
Travel to station 1. Available gas = (7 - 6 + 5) = 6.
Return to station 2. Available gas = (6 - 6) = 0.
Therefore, return 2 as the starting index.

Input: gas[] = [1, 2 ,3 ,4, 5], cost[] = [3, 4, 5, 1, 2]
Output: 3
Explanation: Start at gas station 3 (index 3) and fill up with 4 units of gas. Your tank = 0 + 4 = 4

Travel to station 4. Available gas = 4 - 1 + 5 = 8
Travel to station 0. Available gas = 8 - 2 + 1 = 7
Travel to station 1. Available gas= 7 - 3 + 2 = 6
Travel to station 2. Available gas = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. The gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

Input: arr[] = [3, 9], cost[] = [7, 6]
Output: -1
Explanation: There is no gas station to start with such that you can complete the tour.

Table of Content

[Naive Approach] Considering Every Index as Starting Point - O(n^2) Time and O(1) Space
[Expected Approach 1] Greedy Approach - O(n) Time and O(1) Space
[Expected Approach 2] Greedy Approach in One Pass - O(n) Time and O(1) Space
[Naive Approach] Considering Every Index as Starting Point - O(n^2) Time and O(1) Space
The simplest approach is to consider each index as a starting point and check if a car can complete the circular tour starting from that index. If we find a valid starting point, we will return it.




[Expected Approach 1] Greedy Approach - O(n) Time and O(1) Space
We start by assuming the 0th index as the starting point for the circular tour. As we traverse the array, we calculate the available gas at each gas station, which is the previously available gas + gas[i] - cost[i]. If, at any station i, the available gas drops below zero, it indicates that a car cannot proceed to the next station (i + 1) from the current starting point. In such a case, we update the starting point to i + 1 and continue the process. After completing the traversal of the array, we check whether the starting point is valid for the circular tour.

If a car starts at gas station A and cannot reach gas station B, then any gas station located between A and B cannot help us reach B either. But why?

If we start at A and are unable to reach B, but we can reach all the stations up to B-1. Let's assume a gas station C (C<=B-1) located between station A and B. When we arrive at C from A, we must have had a positive amount of gas in our tank. Therefore, if we can't reach B starting with positive amount of gas at C, it would be impossible to reach B from C with a zero amount of gas.
[Expected Approach 2] Greedy Approach in One Pass - O(n) Time and O(1) Space
This approach is optimization for the previous one. After completing the entire traversal of the array, instead of checking the validity by circularly traversing from the starting index, we calculate the total gas remaining (net gas and the cost difference). If the difference is greater than or equal to zero, then it's obvious that the starting point is valid; otherwise, it is not possible to complete a circular loop.

gas-station-1.webp