Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.
The graph is represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge from verticex u to v.

Examples:

Input: V = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3]]

Output: true
Explanation: The diagram clearly shows a cycle 0 → 2 → 0

Table of Content

[Approach 1] Using DFS - O(V + E) Time and O(V) Space
[Approach 2] Using Topological Sorting - O(V + E) Time and O(V) Space
[Approach 1] Using DFS - O(V + E) Time and O(V) Space
The problem can be solved based on the following idea:

To find cycle in a directed graph we can use the  Depth First Traversal  (DFS) technique. It is based on the idea that there is a cycle in a graph  only if there is a back edge  [i.e., a node points to one of its ancestors in a DFS tree] present in the graph. 

To detect a back edge, we need to keep track of the visited nodes that are in the current recursion stack [i.e., the current path that we are visiting]. Please note that all ancestors of a node are present in recursion call stack during DFS. So if there is an edge to an ancestor in DFS, then this is a back edge.

To keep track of vertices that are in recursion call stack, we use a boolean array where we use vertex number as an index. Whenever we begin recursive call for a vertex, we mark its entry as true and whenever the recursion call is about to end, we mark false.

Time Complexity: O(V + E), the Time Complexity of this method is the same as the time complexity of DFS traversal which is O(V+E).
Auxiliary Space: O(V), storing the visited array and recursion stack requires O(V) space.

We do not count the adjacency list in auxiliary space as it is necessary for representing the input graph.

In the below article, another O(V + E) method is discussed : Detect Cycle in a direct graph using colors

[Approach 2] Using Topological Sorting - O(V + E) Time and O(V) Space
Here we are using  Kahn's algorithm  for topological sorting, if it successfully removes all vertices from the graph, it's a DAG with no cycles. If there are remaining vertices with in-degrees greater than 0, it indicates the presence of at least one cycle in the graph. Hence, if we are not able to get all the vertices in topological sorting then there must be at least one cycle. 


Time Complexity: O(V + E), the time complexity of this method is the same as the time complexity of BFS traversal which is O(V+E).
Auxiliary Space: O(V), for creating queue and array indegree.

We do not count the adjacency list in auxiliary space as it is necessary for representing the input graph.

