Table of Content

[Naive Approach] Using Nested Loops - O(n^2) Time and O(1) Space
[Better approach] Using Prefix and Suffix Array - O(n) Time and O(n) Space
[Efficient Approach] Using Product Array - O(n) Time and O(1) Space

[Naive Approach] Using Nested Loops - O(n^2) Time and O(1) Space
The idea is simple, for every element arr[i], we compute product of all elements except itself. To compute the product, we run an inner loop.

[Better approach] Using Prefix and Suffix Array - O(n) Time and O(n) Space
The above approach can be optimized by avoiding the repetitive calculation of products of elements. The idea is to precompute the prefix and suffix products and store them in two arrays. Now we can find the product of array except i-th element, by using these precomputed arrays in constant time.

product of array except i-th element = prefProduct[i] * suffProduct[i]

prefProduct[i] stores product of all elements before i-th index in the array.
suffProduct[i] stores product of all elements after i-th index in the array.

[Efficient Approach] Using Product Array - O(n) Time and O(1) Space
The idea is to handle two special cases of the input array: when it contains zero(s) and when it doesn't.

If the array has no zeros, product of array at any index (excluding itself) can be calculated by dividing the total product of all elements by the current element.

However, division by zero is undefined, so if there are zeros in the array, the logic changes. If there is exactly one zero, the product for that index will be the product of all other non-zero elements, while the elements in rest of the indices will be zero.
If there are more than one zero, the product for all indices will be zero, since multiplying by zero results in zero.

