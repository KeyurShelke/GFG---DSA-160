Table of Content

[Naive Approach] Using Hash Set - O(n) Time and O(n) Space
[Better Approach] Using Index Comparison - O(n) Time and O(1) Space
[Expected Approach] Using Binary Search - O(log n) Time and O(1) Space


[Naive Approach] Using Hash Set - O(n) Time and O(n) Space
Insert all array elements into a hash set.
Now starting from 1, one by one search all natural numbers in the hash set and increment the missing count whenever a number is not present.
When the count of missing numbers become k, return the current number.

[Better Approach] Using Index Comparison - O(n) Time and O(1) Space
The idea is based on the following facts

The value of the result would be at least k. For example, for [10, 11, 12] and k = 5, the answer would be 5 and for [1, 2, 3] and k = 2, the answer would be 5.
The maximum possible value of k would be k + n where n is size of the array. This happen for arrays of first n natural numbers like [1, 2, 3, 4] and [1, 2, 3]
While traversing the array, if arr[i] becomes greater than (k + i), then the k-th missing element is k + i.
For example, for [1, 3, 5] and k = 2.

For i = 0, we have arr[i] less than 2 + i.
For i = 1, we have arr[i] equal to 2 + i.
For i = 2, we have arr[i] more than 2 + i. So we return 2 + i which is 4.

[Expected Approach] Using Binary Search - O(log n) Time and O(1) Space
In the previous approach, we used linear search to find the first index where arr[i] > (k + i). Since the input array is sorted, once we have found the index i 
such that arr[i] > (k + i), then for all indices j (j > i), arr[j] will also be greater than (k + j). So, we can optimize the previous approach using binary 
search to find the index i so that the k-th missing element is k + i.






