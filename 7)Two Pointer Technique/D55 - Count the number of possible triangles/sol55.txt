Table of Content

[Naive Approach] Checking all Triplets - O(n^3) Time and O(1) Space
[Better Approach] Using Binary Search - O((n^2)*log n) Time and O(1) Space
[Expected Approach] Using Two Pointer - O(n^2) Time and O(1) Space

[Naive Approach] Checking all Triplets - O(n^3) Time and O(1) Space
A simple approach is to run three nested loops that select three different values from an array. And in the innermost loop, we checks for the triangle property which specifies the sum of any two sides must be greater than the value of the third side.

Better Approach] Using Binary Search - O((n^2)*log n) Time and O(1) Space
The idea is to sort the array in ascending order. Then, use two nested loops: the outer loop to fix the first side, and the inner loop to fix the second side.

Next, we find the farthest index for the third side (beyond the indices of the first two sides), such that its value is less than the sum of the first two sides, using Binary Search. So a range of values for third side can be found, where it is guaranteed that its length is greater than the other individual sides but less than the sum of both sides. Add this range size to the result.

[Expected Approach] Using Two Pointers Technique - O(n^2) Time and O(1) Space
The idea is to sort the array to simplify checking the triangle inequality. Then, for each element (treated as the largest side), use two pointers technique to find count of pairs of smaller sides that can form a triangle with it.
For this, the two pointers are initialized as: one pointer (left) starts at index 0, and the other pointer (right) is positioned just before the current largest side (arr[i]).

Now, compare the sum of arr[left] + arr[right] with the current largest side (arr[i]):

If the sum is greater than or equal to arr[i], a valid triangle can be formed. Count all valid pairs between left and right, then move the right pointer to the left to explore smaller side values.
If the sum is less than arr[i], increment the left pointer to increase the sum and check larger values.







