Table of Content

Observations
[Naive Approach] Find left and right max for each index - O(n^2) Time and O(1) Space
[Better Approach] Prefix and suffix max for each index - O(n) Time and O(n) Space
[Expected Approach] Using Two Pointers - O(n) Time and O(1) Space
[Alternate Approach] Using Stack - O(n) Time and O(n) Space
Observations
The basic intuition of the problem is as follows:

An element of the array can store water if there are higher bars on the left and the right. 
The amount of water to be stored in every position can be found by finding the heights of the higher bars on the left and right sides. 
The total amount of water stored is the summation of the water stored in each index.
No water can be filled if there is no boundary on both sides.
[Naive Approach] Find left and right max for each index - O(n^2) Time and O(1) Space
Traverse every array element and find the highest bars on the left and right sides. Take the smaller of two heights. The difference between the smaller height and the height of the current element is the amount of water that can be stored in this array element.

[Better Approach] Prefix and suffix max for each index - O(n) Time and O(n) Space
In the previous approach, for every element we needed to calculate the highest element on the left and on the right. 

So, to reduce the time complexity: 

For every element we first calculate and store the highest bar on the left and on the right (say stored in arrays left[] and right[]). 
Then iterate the array and use the calculated values to find the amount of water stored in this index, 
which is the same as ( min(left[i], right[i]) - arr[i] )

[Expected Approach] Using Two Pointers - O(n) Time and O(1) Space
The approach is mainly based on the following facts:

If we consider a subarray arr[left...right], we can decide the amount of water either for arr[left] or arr[right] if we know the left max (max element in arr[0...left-1]) and right max (max element in arr[right+1...n-1].
If left max is less than the right max, then we can decide for arr[left]. Else we can decide for arr[right]
If we decide for arr[left], then the amount of water would be left max - arr[left] and if we decide for arr[right], then the amount of water would be right max - arr[right].

[Alternate Approach] Using Stack - O(n) Time and O(n) Space
This approach involves using next greater and previous greaterelements to solve the trapping rainwater problem. By utilizing a stack and a single traversal, we can compute both the next and previous greater elements for every item. For each element, the water trapped can be determined by the minimum height between the previous and next greater elements. The water is filled between these elements, and the process continues recursively with the next greater and previous greater elements.




