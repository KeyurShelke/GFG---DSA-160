Table of Content

[Naive Approach] Finding all possible boundaries - O(n^2) Time and O(1) Space
[Expected Approach] Using Two Pointers - O(n) Time and O(1) Space


[Naive Approach] Finding all possible boundaries - O(n^2) Time and O(1) Space
The idea is to iterate over all pair of lines in the array. For each line arr[i], consider it as the left boundary and then iterate over all subsequent lines arr[j] (j > i) to consider them as them as the right boundary. For each pair of boundaries, calculate the water that can be contained between them by the formula min(arr[i], arr[j]) * (j - i). The result will be the maximum amount of water found across all pairs.

Time Complexity: O(n^2)
Auxiliary Space: O(1)

[Expected Approach] Using Two Pointers - O(n) Time and O(1) Space
The idea is to maintain two pointers: left pointer at the beginning of the array and right pointer at the end of the array. These pointers act as the container's sides so we can calculate the amount of water stored between them using the formula: min(arr[left], arr[right]) * (right - left).

After calculating the amount of water for the given sides, we can have three cases:

arr[left] < arr[right]: This means that we have calculated the water stored for the container of height arr[left], so increment left by 1.
arr[left] >= arr[right]: This means that we have calculated the water stored for the container of height arr[right], so decrement right by 1.
Repeat the above process till left is less than right keeping track of the maximum water stored as the result.

Time Complexity: O(n)
Auxiliary Space: O(1)
 



