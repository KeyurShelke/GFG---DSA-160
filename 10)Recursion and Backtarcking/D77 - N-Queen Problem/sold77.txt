Printing all solutions in N-Queen Problem
Given an integer n, the task is to find all distinct solutions to the n-queens problem, where n queens are placed on an n * n chessboard such that no two queens can attack each other.

Note: Each solution is a unique configuration of n queens, represented as a permutation of [1,2,3,....,n]. The number at the ith position indicates the row of the queen in the ith column. For example, [3,1,4,2] shows one such layout.

Example:

Input: n = 4
Output: [2, 4, 1, 3], [3, 1, 4, 2]

Explanation : These are the 2 possible solutions.

Input: n = 2
Output: []
Explanation: No solution, as queens can attack each other in all possible configurations.

Table of Content

[Naive Approach] By Generating all Permutations using Recursion
[Expected Approach] Using Backtracking with Pruning
[Alternate Approach] Backtracking Using Bit-masking
[Naive Approach] - Using Recursion - O(n! * n) Time and O(n) Space
A simple idea to solve the N-Queens problem is to generate all possible permutations of [1, 2, 3, ..., n] and then check if it represents a valid N-Queens configuration. Since each queen has to be in a different row and column, using permutations automatically takes care of those rules. But we still need to check that no two queens are on the same diagonal.

Output
[2 4 1 3]
[3 1 4 2]
Time Complexity: O(n!*n), n! for generating all permutations and O(n) for validation of each permutation.
Auxiliary Space: O(n)

[Expected Approach] - Using Backtracking with Pruning - O(n!) Time and O(n) Space
To optimise the above approach, we can use backtracking with pruning. Instead of generating all possible permutations, we build the solution incrementally, while doing this we can make sure at each step that the partial solution remains valid. If a conflict occur then we'll backtrack immediately, this helps in avoiding unnecessary computations.

Step-by-step implementation:

Start from the first column and try placing a queen in each row.
Keep arrays to track which rows are already occupied. Similarly, for tracking major and minor diagonals are already occupied.
If a queen placement conflicts with existing queens, skip that row and backtrack the queen to try the next possible row (Prune and backtrack during conflict).



Output
[2 4 1 3]
[3 1 4 2]
Time complexity: O(n!) For generating all permutations.
Auxiliary Space: O(n)

[Alternate Approach] - Backtracking Using Bit-masking
To further optimise the backtracking approach, especially for larger values of n, we can use bit-masking to efficiently track occupied rows and diagonals. Bit-masking lets us to use integers (rows, ld, rd) to track which rows and diagonals are occupied, making use of fast bitwise operations for quicker calculations. The approach remains the same as above.

Output
[2 4 1 3]
[3 1 4 2]
Time Complexity: O(n!), for generating all permutations.
Space Complexity: O(n)









