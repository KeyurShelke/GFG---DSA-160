There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Your task is to count the number of ways, the person can reach the top (order does matter).

Examples:

Input: n = 1
Output: 1
Explanation: There is only one way to climb 1 stair. 
Input: n = 2
Output: 2
Explanation: There are 2 ways to reach 2th stair: {1, 1} and {2}.  
Input: n = 4
Output: 5
Explanation: There are five ways to reach 4th stair: {1, 1, 1, 1}, {1, 1, 2}, {2, 1, 1}, {1, 2, 1} and {2, 2}.
Constraints:
1 ≤ n ≤ 44

Table of Content

Using Recursion – O(2^n) Time and O(n) Space
Using Top-Down DP (Memoization) – O(n) Time and O(n) Space
Using Bottom-Up DP (Tabulation) – O(n) Time and O(n) Space
Using Space Optimized DP – O(n) Time and O(1) Space
Using Matrix Exponentiation – O(logn) Time and O(1) Space
Using Recursion – O(2^n) Time and O(n) Space
We can easily identify the recursive nature of this problem. A person can reach nth stair either from (n-1)th stair or (n-2)th stair. Thus, for each stair n, we calculate the number of ways to reach the (n-1)th and (n-2)th stairs, and add them to get the total number of ways to reach the nth stair. This gives us the following recurrence relation:

Time Complexity: O(2n), as we are making two recursive calls for each stair.
Auxiliary Space: O(n), as we are using recursive stack space.

Using Top-Down DP (Memoization) – O(n) Time and O(n) Space
If we notice carefully, we can observe that the above recursive solution holds the following two properties of Dynamic Programming:

1. Optimal Substructure: 

Number of ways to reach the nth stair, i.e., countWays(n), depends on the optimal solutions of the subproblems countWays(n-1) and countWays(n-2). By combining these optimal substructures, we can efficiently calculate the total number of ways to reach the nth stair.

2. Overlapping Subproblems: 

While applying a recursive approach in this problem, we notice that certain subproblems are computed multiple times. For example, when calculating countWays(4), we recursively calculate countWays(3) and countWays(2), which in turn will recursively compute countWays(2) again. This redundancy leads to overlapping subproblems.

Time Complexity: O(n), as we compute each subproblem only once using memoization.
Auxiliary Space: O(n), due to the memoization array and the recursive stack space(both take linear space only).

Using Bottom-Up DP (Tabulation) – O(n) Time and O(n) Space
The approach is similar to the previous one; just instead of breaking down the problem recursively, we iteratively build up the solution by calculating in bottom-up manner. Maintain a dp[] table such that dp[i] stores the number of ways to reach ith stair. 

Base Case: For i = 0 and i = 1, dp[i] = 1
Recursive Case: For i > 1, dp[i] = dp[i - 1] + dp[i - 2] 

Using Space Optimized DP – O(n) Time and O(1) Space
In the above approach, we observe that each subproblem only depends on the results of previous two subproblems, that is dp[i] depends on dp[i - 1] and dp[i - 2] only. So, we can optimize the space complexity by using just two variables to store these last two values. 

Using Matrix Exponentiation – O(logn) Time and O(1) Space
This problem is quite similar to the Fibonacci approach, with only one difference in the base case (the Fibonacci sequence value for 0 is 0, whereas in this problem it is 1). To know more about how to calculate fibonacci number using Matrix Exponentiation, please refer to this post.




