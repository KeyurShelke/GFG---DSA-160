Given a string s, your task is to find the longest palindromic substring within s.

A substring is a contiguous sequence of characters within a string, defined as s[i...j] where 0 ≤ i ≤ j < len(s).

A palindrome is a string that reads the same forward and backward. More formally, s is a palindrome if reverse(s) == s.

Note: If there are multiple palindromic substrings with the same length, return the first occurrence of the longest palindromic substring from left to right.

Examples :

Input: s = “forgeeksskeegfor” 
Output: “geeksskeeg”
Explanation: There are several possible palindromic substrings like “kssk”, “ss”, “eeksskee” etc. But the substring “geeksskeeg” is the longest among all.
Input: s = “Geeks” 
Output: “ee”
Explanation: "ee" is the longest palindromic substring of "Geeks". 
Input: s = “abc” 
Output: “a”
Explanation: "a", "b" and "c" are longest palindromic substrings of same length. So, the first occurrence is returned.
Constraints:
1 ≤ s.size() ≤ 103
s consist of only lowercase English letters.

Table of Content

[Naive Approach] Generating all sub-strings - O(n^3) time and O(1) space
[Better Approach] Using Dynamic Programming - O(n^2) time and O(n^2) space
[Better Approach] Using Expansion from center - O(n^2) time and O(1) space
[Expected Approach] Using Manacher’s Algorithm - O(n) time and O(n) space
[Naive Approach] Generating all sub-strings - O(n^3) time and O(1) space
The idea is to generate all substrings. 

For each substring, check if it is palindrome or not. 
If substring is Palindrome, then update the result on the basis of longest palindromic substring found till now.

[Better Approach - 1] Using Dynamic Programming - O(n^2) time and O(n^2) space
The idea is to use Dynamic Programming to store the status of smaller substrings and use these results to check if a longer substring forms a palindrome.

The main idea behind the approach is that if we know the status (i.e., palindrome or not) of the substring ranging [i, j], we can find the status of the substring ranging [i-1, j+1] by only matching the character str[i-1] and str[j+1].
If the substring from i to j is not a palindrome, then the substring from i-1 to j+1 will also not be a palindrome. Otherwise, it will be a palindrome only if str[i-1] and str[j+1] are the same.
Base on this fact, we can create a 2D table (say table[][] which stores status of substring str[i . . . j] ), and check for substrings with length from 1 to N. For each length find all the substrings starting from each character i and find if it is a palindrom or not using the above idea. The longest length for which a palindrome formed will be the required asnwer.
Note: Refer to Longest Palindromic Substring using Dynamic Programming for detailed approach and code.

[Better Approach - 2] Using Expansion from center - O(n^2) time and O(1) space
The idea is to traverse each character in the string and treat it as a potential center of a palindrome, trying to expand around it in both directions while checking if the expanded substring remains a palindrome. 

For each position, we check for both odd-length palindromes (where the current character is the center) and even-length palindromes (where the current character and the next character together form the center).
 As we expand outward from each center, we keep track of the start position and length of the longest palindrome found so far, updating these values whenever we find a longer valid palindrome.
Step-by-step approach:

Use two pointers, low and hi, for the left and right end of the current palindromic substring being found. 
Then checks if the characters at s[low] and s[hi] are the same. 
If they are, it expands the substring to the left and right by decrementing low and incrementing hi. 
It continues this process until the characters at s[low] and s[hi] are unequal or until the indices are in bounds.
If the length of the current palindromic substring becomes greater than the maximum length, it updates the maximum length.

[Expected Approach] Using Manacher’s Algorithm - O(n) time and O(n) space
We can solve this problem in linear time using Manacher’s Algorithm. Refer the below links for details:

Manacher’s Algorithm - Part 1
Manacher’s Algorithm - Part 2
Manacher’s Algorithm - Part 3
