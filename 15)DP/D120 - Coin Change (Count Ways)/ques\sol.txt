Coin Change (Count Ways)
Difficulty: MediumAccuracy: 43.1%Submissions: 299K+Points: 4
Given an integer array coins[ ] representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ]. 
Note: Assume that you have an infinite supply of each type of coin. Therefore, you can use any coin as many times as you want.
Answers are guaranteed to fit into a 32-bit integer. 

Examples:

Input: coins[] = [1, 2, 3], sum = 4
Output: 4
Explanation: Four Possible ways are: [1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].
Input: coins[] = [2, 5, 3, 6], sum = 10
Output: 5
Explanation: Five Possible ways are: [2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5] and [5, 5].
Input: coins[] = [5, 10], sum = 3
Output: 0
Explanation: Since all coin denominations are greater than sum, no combination can make the target sum.

Table of Content

[Naive Approach] Using Recursion - O(2^sum) time and O(sum) space
[Better Approach 1] Using Top-Down DP (Memoization) - O(sum*n) time and O(sum*n) space
[Better Approach 2] Using Bottom-Up DP (Tabulation) – O(sum*n) time and O(sum*n) space
[Expected Approach] Using Space Optimized DP – O(sum*n) time and O(sum) space
[Naive Approach] Using Recursion - O(2^sum) time and O(sum) space
For each coin, there are 2 options:

Include the current coin: Subtract the current coin's denomination from the target sum and call the count function recursively with the updated sum and the same set of coins i.e., count(coins, n, sum - coins[n-1] )
Exclude the current coin: Call the count function recursively with the same sum and the remaining coins. i.e., count(coins, n-1, sum ).
Recurrence Relation: The final result will be the sum of both cases.
count(coins, n, sum) = count(coins, n, sum-count[n-1]) + count(coins, n-1, sum)
Base cases:

If the target sum (sum) is 0, there is only one way to make the sum, which is by not selecting any coin. So, count(0, coins, n) = 1.
If the target sum (sum) is negative or no coins are left to consider (n == coins.size), then there are no ways to make the sum, so count(sum, coins, 0) = 0.

[Better Approach 1] Using Top-Down DP (Memoization) - O(sum*n) time and O(sum*n) space
1. Optimal Substructure: Number of ways to make sum at index i, i.e., count(i, sum, coins), depends on the optimal solutions of the subproblems count(i, sum-coins[i-1], coins) , and count(i-1, sum, coins). By adding these optimal substructures, we can efficiently calculate the number of ways to make target sum at index i.

2. Overlapping Subproblems: While applying a recursive approach in this problem, we notice that certain subproblems are computed multiple times. 

Follow the below steps to Implement the idea:

Since there are two parameters that change during recursive calls, we create a 2D memo array to store the results of previously solved subproblems.
Since the range of recursion parameters goes from 0 to n and 0 to sum, we keep dimensions of the 2D array as (n+1) x (sum + 1)
memo[i][j] will represent the number of distinct ways to make the sum j by using the first i coins.
During the recursion call, if the same state is called more than once, then we can directly return the answer stored for that state instead of calculating again.

[Better Approach 2] Using Bottom-Up DP (Tabulation) – O(sum*n) time and O(sum*n) space
The idea is to fill the DP table based on previous values. For each coin, we either include it or exclude it to compute the minimum number of coins needed for each sum. The table is filled in an iterative manner from i = 1 to i = n and for each sum from 0 to sum. 

The dynamic programming relation is as follows: 

if (sum-coins[i-1]) is greater than 0, then dp[i][sum] = dp[i][sum-coins[i-1]] + dp[i+1][sum].
else dp[i][sum] = dp[i+1][sum].

[Expected Approach] Using Space Optimized DP – O(sum*n) time and O(sum) space
In previous approach of dynamic programming we have derive the relation between states as given below:

if (sum-coins[i]) is greater than 0, then dp[i][sum] = dp[i][sum-coins[i]] + dp[i+1][sum].
else dp[i][sum] = dp[i+1][sum].
If we observe that for calculating current dp[i][sum] state we only need previous row dp[i-1][sum] or current row dp[i][sum-coins[i]]. There is no need to store all the previous states just one previous state is used to compute result.
