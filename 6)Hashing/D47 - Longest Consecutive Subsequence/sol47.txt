
Table of Content

[Naive Approach] Using Sorting - O(n*log n) Time and O(1) Space
[Expected Approach] Using Hashing - O(n) Time and O(n) Space

[Naive Approach] Using Sorting - O(n*log n) Time and O(1) Space
The idea is to sort the array and find the longest subarray with consecutive elements. Initialize the consecutive count with 1 and start iterating over the sorted array from the second element. For each element arr[i], we can have three cases:

arr[i] = arr[i - 1], then the ith element is simply a duplicate element so skip it.
arr[i] = arr[i - 1] + 1, then increase the consecutive count and update result if consecutive count is greater than result.
arr[i] > arr[i - 1], then reset the consecutive count to 1.
After iterating over all the elements, return the result.

[Expected Approach] Using Hashing - O(n) Time and O(n) Space
The idea is to use Hashing. We first insert all elements in a Hash Set. Then, traverse over all the elements and check if the current element can be a starting element of a consecutive subsequence. If it is then start from X and keep on removing elements X + 1, X + 2 .... to find a consecutive subsequence.

To check if the current element, say X can be a starting element, check if (X - 1) is present in the set. If (X - 1) is present in the set, then X cannot be starting of a consecutive subsequence.




