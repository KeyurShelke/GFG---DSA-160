Table of Content

[Naive Approach] Generating all Possible Pairs - O(n^2) time and O(1) space
[Better Approach 1] Sorting and Binary Search - O(n*log(n)) time and O(1) space
[Better Approach 2] Sorting and Two-Pointer Technique - O(n*log(n)) time and O(1) space

[Expected Approach] Using Hash Set - O(n) time and O(n) space
[Naive Approach] Generating all Possible Pairs - O(n^2) time and O(1) space
The very basic approach is to generate all the possible pairs and check if any of them add up to the target value. To generate all pairs, we simply run two nested loops.

Time Complexity: O(n²), for using two nested loops
Auxiliary Space: O(1)

[Better Approach 1] Sorting and Binary Search - O(n*log(n)) time and O(1) space
We can also solve this problem using Binary Search. As we know that searching element in sorted array would take O(log(n)) time. We first sort the array. Then for each number arr[i] in the array, we first calculate its complement (i.e., target - current number) then uses binary search to quickly check if this complement exists in the subarray after index i. If we find the complement, we returns true; If we never find a complement (after checking all numbers), we return false.

Time Complexity: O(n*log(n)), for sorting the array
Auxiliary Space: O(1)

[Better Approach 2] Sorting and Two-Pointer Technique - O(n*log(n)) time and O(1) space
The idea is to use the two-pointer technique but for using the two-pointer technique, the array must be sorted. Once the array is sorted then we can use this approach by keeping one pointer at the beginning (left) and another at the end (right) of the array. Then check the sum of the elements at these two pointers:

If the sum equals the target, we’ve found the pair.
If the sum is less than the target, move the left pointer to the right to increase the sum.
If the sum is greater than the target, move the right pointer to the left to decrease the sum.

Time Complexity: O(n*log(n)), for sorting the array
Auxiliary Space: O(1)

Note : This approach is the best approach for a sorted array. But if array is not sorted, then we use the below approach.

[Expected Approach] Using Hash Set - O(n) time and O(n) space
Hashing provides a more efficient solution to the 2Sum problem. Rather than checking every possible pair, we store each number in an unordered set during iterating over the array's elements. For each number, we calculate its complement (i.e., target - current number) and check if this complement exists in the set. If it does, we have successfully found the pair that sums to the target. This approach significantly reduces the time complexity and allowing us to solve the problem in linear time O(n).

Step-by-step approach:

Create an empty Hash Set or Unordered Set
Iterate through the array and for each number in the array:
Calculate the complement (target - current number).
Check if the complement exists in the set:
If it is, then pair found.
If it isn’t, add the current number to the set.
If the loop completes without finding a pair, return that no pair exists.



Time Complexity: O(n), for single iteration over the array
Auxiliary Space: O(n), for hash set.

Related Problems:  
Given two unsorted arrays, find all pairs whose sum is target
Count pairs with given sum
Count all distinct pairs with difference equal to k
2Sum - Complete Tutorial

