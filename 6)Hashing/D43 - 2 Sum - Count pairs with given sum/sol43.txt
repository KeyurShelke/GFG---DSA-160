Table of Content

[Naive Approach] By Generating all Possible Pairs - O(n^2) time and O(1) space
[Better Approach] Using Two Pointers Technique - O(nlogn) Time and O(1) Space
[Expected Approach] Using Hash Map or Dictionary - O(n) Time and O(n) Space
[Naive Approach] By Generating all Possible Pairs - O(n^2) time and O(1) space
The very basic approach is to generate all the possible pairs and check if any pair exists whose sum is equals to given target value, then increment the count variable.

[Better Approach] Using Two Pointers Technique - O(nlogn) Time and O(1) Space
The idea is to sort the input array and use two-pointer technique. Maintain two pointers, say left and right and initialize them to the first and last element of the array respectively. According to the sum of left and right pointers, we can have three cases:

arr[left] + arr[right] < target: Increase the pair sum by moving the left pointer towards right.
arr[left] + arr[right] > target: Decrease the pair sum by moving the right pointer towards left.
arr[left] + arr[right] = target: We have found a pair whose sum is equal to target. We can find the product of the count of both the elements and add them to the result.
To know more about the implementation, please refer 2 Sum – Count Pairs with given Sum in Sorted Array.

[Expected Approach] Using Hash Map or Dictionary - O(n) Time and O(n) Space
HashMap or Dictionary provides a more efficient solution to the 2Sum problem. Instead of checking every pair of numbers, we keep each number in a map as we go through the array. For each number, we calculate its complement (i.e., target - current number) and check if it’s in the map. If it is, increment the count variable by the occurrences of complement in map.

Related Problems:  

2 Sum – Count Pairs with given Sum in Sorted Array
2 Sum - Complete Tutorial


