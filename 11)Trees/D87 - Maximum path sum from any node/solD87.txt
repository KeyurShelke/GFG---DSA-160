Approach:

If the maximum sum path in a binary tree passes through the root, there are four possible cases to consider:

The path consists only the root itself, without involving any children.
The path starts at the root and extends downward through its right child, possibly continuing to the bottom of the right subtree.
The path starts at the root and extends downward through its left child, possibly continuing the bottom of the left subtree.
The path includes the root and spans both the left and right children.
The idea is to keep track of all four paths for each subtree of the tree and pick up the max one in the end.

Implementation:

For each subtree, we want to find the maximum path sum that starts at its root and goes down through either its left or right child. To do this, we create a recursive function (lets say MPS(current root)) that calculates and returns the maximum path sum starting from the root and extending downward through one of its children.

Within the same function, we can also calculate the maximum path sum for the current subtree and compare it with the final answer. This is done by combining the MPS(current root -> left) and MPS(current root -> right) with the value of the current root.

Note that if the MPS() from the left or right child is negative, we simply ignore it while calculating the maximum path sum for the current subtree.

Time Complexity: O(n), where n is the number of nodes in the Binary Tree.
Auxiliary Space: O(h), where h is the height of the tree.

