Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions

serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).

Examples :

Input: root = [1, 2, 3]
Output: [2, 1, 3]

Table of Content

How to store a general Binary Tree?
Using Level Order Traversal
How to serialize N-ary tree?
If the given Tree is a Binary Search Tree?
If the given Binary Tree is Binary Search Tree, we can store it by either storing preorder or postorder traversal. In the case of Binary Search Trees, only preorder or postorder traversal is sufficient to store structure information.

If given Binary Tree is Complete Tree?
A Binary Tree is complete if all levels are completely filled except possibly the last level and all nodes of last level are as left as possible (Binary Heaps are complete Binary Tree). For a complete Binary Tree, level order traversal is sufficient to store the tree. We know that the first node is root, next two nodes are nodes of next level, next four nodes are nodes of 2nd level and so on.

If given Binary Tree is Full Tree?
A full Binary is a Binary Tree where every node has either 0 or 2 children. It is easy to serialize such trees as every internal node has 2 children. We can simply store preorder traversal and store a bit with every node to indicate whether the node is an internal node or a leaf node.

How to serialise a general Binary Tree?
The idea to traverse the tree in preorder manner. At each node, append its value into the resultant list. If its left child exists, then recursively traverse the left subtree. Otherwise, append -1 to the resultant list. Similarly for right subtree, if right child node exists, then recursively traverse the right subtree. Otherwise append -1 to the resultant list. For deserialization, Traverse the array in pre-order manner. If the current element is -1, then return NULL. Otherwise, create a new node with value equal to current element and recursively construct the left and right subtree.

Time Complexity: O(n), where n is the number of nodes in the tree.
Auxiliary Space: O(n)

Using Level Order Traversal
The idea is to traverse the tree in level order manner. Push the root node into a queue. While queue is not empty: For each node, if it is not null, then append its value into the resultant list and push its left and right child nodes into the queue. If current node is null, then push -1 into the resultant list.
For deserialization, create the root node with value equal to first element in the array and push this node into a queue. Traverse the array from index 1. Pop the front node from queue. If the current element is -1, then its left child node is null. Otherwise create a new node and link the nodes. Push the left node into the queue. Do the same for right subtree.

Time Complexity: O(n), where n is the number of nodes in the tree.
Auxiliary Space: O(n)

How much extra space is required in above solution?

If there are n keys, then the above solution requires n+1 markers which may be better than simple solution (storing keys twice) in situations where keys are big or keys have big data items associated with them.

Can we optimize it further?

The above solution can be optimized in many ways. If we take a closer look at the above serialized trees, we can observe that all leaf nodes require two markers. One simple optimization is:

Store a separate bit with every node to indicate that the node is internal or external. 
This way we donâ€™t have to store two markers with every leaf node as leaves can be identified by the extra bit. 
We still need a marker for internal nodes with one child. 
For example, in the following diagram, the character ' is used to indicate an internal node set bit, and '/' is used as NULL marker.

