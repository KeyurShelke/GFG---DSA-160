Given two nodes n1 and n2 of a Binary Search Tree, find the Lowest Common Ancestor (LCA). You may assume that both values exist in the tree. 

The Lowest Common Ancestor between two nodes n1 and n2 is defined as the lowest node that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself). In other words, the LCA of n1 and n2 is the shared ancestor of n1 and n2 that is located farthest from the root [i.e., closest to n1 and n2].

Input: LCA of 10 and 14
Output:  12
Explanation: 12 is the closest node to both 10 and 14, which is also an ancestor of both the nodes.

Table of Content

LCA of Normal Binary Tree Methods - O(n) Time
Using BST Properties (Recursive Approach) - O(h) Time and O(h) Space
Using BST Properties (Iterative Method) - O(h) Time and O(1) Space
LCA of Normal Binary Tree Methods - O(n) Time
We can use all the methods discussed in Lowest Common Ancestor in a Binary Tree. The methods discussed there give us the best possible time complexity as O(n) where n is the number of nodes in BST. We can do better if we use BST properties.

Using BST Properties (Recursive Approach) - O(h) Time and O(h) Space
In a Binary search tree, while traversing the tree from top to bottom the first node which lies in between the two numbers n1 and n2 is the LCA of the nodes, i.e. the first node n with the lowest depth which lies in between n1 and n2 (n1 <= n <= n2, assumingn1 < n2). 

So just recursively traverse the BST , if node's value is greater than both n1 and n2 then our LCA lies in the left side of the node, if it is smaller than both n1 and n2, then LCA lies on the right side. Otherwise, the root is LCA (assuming that both n1 and n2 are present in BST).

Using BST Properties (Iterative Method) - O(h) Time and O(1) Space
The auxiliary space in the above method can be optimized by eliminating recursion. Below is the iterative implementation of this approach.

How to handle cases when key(s) not present?

In a BST, we can search a key in O(h) time. So we can first explicitly search the keys and then do find LCA using the above method and still have time complexity as O(h).

Related Articles:
Lowest Common Ancestor in a Binary Tree, LCA using Parent Pointer, Find LCA in Binary Tree using RMQ
 



