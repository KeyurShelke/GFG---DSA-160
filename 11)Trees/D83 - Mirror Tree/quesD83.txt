Given a binary tree, convert the binary tree to its Mirror tree.

Mirror of a Binary Tree T is another Binary Tree M(T) with left and right children of all non-leaf nodes interchanged.     

Input: root[] = [1, 2, 3, 4, 5]
Output: [1, 3, 2, N, N, 5, 4]

Table of Content

Recursive Approach - O(n) Time and O(h) Space
Iterative Approach - O(n) Time and O(n) Space
Recursive Approach - O(n) Time and O(h) Space
The idea is to use recursion to traverse the tree in Post Order (left, right, root) and while traversing each node, swap the left and right subtrees.

Output
1 3 2 N N 5 4 N N N N 
Time Complexity: O(n), Visiting all the nodes of the tree of size n.
Auxiliary Space: O(h), where h is the height of binary tree.

Iterative Approach - O(n) Time and O(n) Space
The idea is to perform Level Order Traversal using a queue to store the nodes whose left and right pointers need to be swapped. Start with the root node. Till queue is not empty, remove the node from the front, swap its left and right child and push both of the children into the queue. After iterating over all the nodes, we will get the mirror tree.

Output
1 3 2 N N 5 4 N N N N 
Time Complexity: O(n), fro traversing over the tree of size n.
Auxiliary Space: O(n), used by queue to store the nodes of the tree.





