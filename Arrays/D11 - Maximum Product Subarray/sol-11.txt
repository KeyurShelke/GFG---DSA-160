Table of Content

[Naive Approach] By using two nested loops – O(n^2) Time and O(1) Space
[Expected Approach 1] Using minimum and maximum product ending at any 
index - O(n) Time and O(1) Space
[Expected Approach 2] By traversing in both directions - O(n) Time and 
O(1) Space

--

1) [Naive Approach] By using two nested loops – 
O(n^2) Time and O(1) Space

The idea is to traverse over every contiguous subarray, find the product 
of each of these subarrays and return the maximum product among all 
the subarrays.

Time Complexity: O(n^2), where n is the size of array.
Auxiliary Space: O(1)

--

2) [Expected Approach 1] Using minimum and maximum product ending at 
any index - O(n) Time and O(1) Space

Let's assume that the input array has only positive elements. 
Then, we can simply iterate from left to right keeping track of the 
maximum running product ending at any index. The maximum product would 
be the product ending at the last index. The problem arises when we 
encounter zero or a negative element.

If we encounter zero, then all the subarrays containing this zero will 
have product = 0, so zero simply resets the product of the subarray.
If we encounter a negative number, we need to keep track of the 
minimum product as well as the maximum product ending at the previous 
index. This is because when we multiply the minimum product with a 
negative number, it can give us the maximum product. So, keeping track
 of minimum product ending at any index is important as it can lead to 
 the maximum product on encountering a negative number.
Step-by-step algorithm:

Create 3 variables, currMin, currMax and maxProd initialized to the 
first element of the array.
Iterate the indices 0 to N-1 and update the variables:
currMax = maximum(arr[i], currMax * arr[i], currMin * arr[i])
currMin= minimum(arr[i], currMax * arr[i], currMin * arr[i])
update the maxProd with the maximum value for each index.
Return maxProd as the result.

Complexity Analysis:

Time Complexity: O(n), where n is the size of input array.
Auxiliary Space: O(1)

--

3) [Expected Approach 2] By traversing in both directions - 
O(n) Time and O(1) Space 

We will follow a simple approach that is to traverse from the start 
and keep track of the running product and if the running product is 
greater than the max product, then we update the max product. Also, 
if we encounter '0' then make product of all elements till now equal 
to 1 because from the next element, we will start a new subarray.

But what is the problem with this approach?

Problem will occur when our array will contain odd no. of negative 
elements. In that case, we have to reject one negative element so 
that we can even no. of negative elements and their product can be 
positive. Now, since subarray should be contiguous so we can't simply
reject any one negative element. We have to either reject the first 
negative element or the last negative element.

Now, if we traverse from start then only the last negative element 
can be rejected and if we traverse from the last then the first 
negative element can be rejected. So we will traverse from both ends 
and find the maximum product subarray.

Complexity Analysis:

Time Complexity: O(n), where n is the size of input array.
Auxiliary Space: O(1)


