The basic idea is to follow the atoi() algorithm in order and covering all the 
edge cases:

Skip the leading whitespaces by iterating from the first character.
Now, check for at most one sign character ('+' or '-') and maintain a sign 
variable to keep track of the sign of the number.
Finally, read all the digits and construct the number until the first 
non-digit character is encountered or end of the input string is reached.
While constructing the number, if the number becomes greater than 231 - 1, 
print 231 - 1. Similarly, if the number becomes less than -231, print -231.
How to check if the number is greater than 231 - 1 or smaller than -231 ?
The naive way is to use a data type which has size greater than 32 bits like 
long, BigInteger to store the number. However, we can also use 32-bit integer 
by appending the digits one-by-one and for each digit, check if appending 
current digit to the number will make it underflow (< -231) or 
overflow(> 231- 1). While appending a digit to the current number, we can 
have 3 cases:
Case 1: current number < (231 - 1)/10 or current number > -231/10: Simply 
append the digit to the current number as it won't cause overflow/underflow.
Case 2: current number > (231 - 1)/10 or current number < -231/10: 
Return (231 - 1) in case of overflow and -231 in case of underflow.
Case 3: current number = (231 - 1)/10 or current number = -231/10: In this 
case, if current number = (231 - 1)/10, then only 0-7 digits can be appended 
and if current number = -231/10, then only 0-8 digits can be appended.

In the below implementation, we are constructing the absolute value of the 
number, so we can simply compare with (231 - 1)/10 and avoid comparing 
with -231/10.


Time Complexity: O(n), Only one traversal of the string is needed.
Auxiliary Space: O(1), As no extra space is required.
Related Articles:
Recursive program for atoi()
String to Integer in Different Programming Languages
Write your won atof() that takes a string (which represents a floating point 
value) as an argument and returns its value as double.

