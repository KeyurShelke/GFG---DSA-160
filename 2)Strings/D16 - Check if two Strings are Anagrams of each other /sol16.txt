Table of Content

[Naive Approach] Using Sorting
[Expected Approach 1] Using Hash Map or Dictionary
[Expected Approach 2] Using Frequency Array


1) [Naive Approach] Using Sorting

The idea is that if the strings are anagrams, then their characters will be the same, just 
rearranged. Therefore, if we sort the characters in both strings, the sorted strings will be 
identical if the original strings were anagrams. We can simply sort the two given strings and
 compare them – if they are equal, then the original strings are anagrams of each other.

 Time Complexity: O(m*log(m) + n*log(n)), where m and n are length of string s1 and s2 respectively.
Auxiliary Space: O(1) where the strings are mutable but O(n) in languages like Java, Python, C#, 
etc. where strings are immutable.


2) [Expected Approach 1] Using Hash Map or Dictionary

The idea is to use a hash map or dictionary count the frequency of each character in both the 
input strings. If the frequency of every character matches in both strings, then the strings are anagrams.

First, count the occurrences of each character in first string.
Then, decrement the count for each character in the second string.
If the strings are anagrams, all positions in the frequency array should be zero as any non-zero 
position means that the frequency of that character is not same in both strings.

Time Complexity: O(m + n), where m and n are length of string s1 and s2 respectively.
Auxiliary Space: O(26) = O(1). The input strings can only have lowercase letters, so there can 
be at most 26 distinct characters in the hash map.



3) [Expected Approach 2] Using Frequency Array

Instead of using a hash map to store the frequency of each character, we can create a frequency 
array of size 26 by using characters as index in this array. The frequency of ‘a’ is going to be 
stored at index 0, ‘b’ at 1, and so on. To find the index of a character, we subtract character 
a’s ASCII value from the ASCII value of the character.

Count character frequency in the first string, then for each character in the second string, 
decrement its count from the frequency array. If the strings are anagrams, all positions in the 
frequency array will be zero. Any non-zero position means the frequency of that character is 
not equal in both the strings.
Output
true
Time Complexity: O(m + n), where m and n are length of string s1 and s2 respectively.
Auxiliary Space: O(MAX_CHAR) = O(26) = O(1), the input strings can only have lowercase 
letters, so we only need frequency array of size 26.



