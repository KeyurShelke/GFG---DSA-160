Table of Content

[Naive Approach - 1] Using Hashing - O(2n) Time and O(2n) Space
[Naive Approach - 2] Using Hashing and Recursion- O(n) Time and O(3n) Space
[Expected Approach] By Inserting Nodes In-place - O(3n) Time and O(1) Space
[Naive Approach - 1] Using Hashing - O(2n) Time and O(2n) Space
The idea is to create a new node corresponding to each node in the original linked list and store the new nodes in a hash table. Now, again traverse the original linked list and update the next and random pointers of new nodes corresponding to every original node.

Steps to clone a linked list with next and random pointer:

Create a hash table, say mp to store the new nodes corresponding to their original nodes.
Traverse the original linked list and for every node, say curr,
Create a new node corresponding to curr and push them into a hash table, mp[curr] = new Node().
Again traverse the original linked list to update the next and random pointer of each new node, mp[curr]->next = mp[curr->next] and mp[curr]->random = mp[curr->random].
Return mp[head] as the head of the cloned linked list.
Below is the implementation of the above approach:

Output
Original linked list:
1(3) -> 2(1) -> 3(5) -> 4(3) -> 5(2)
Cloned linked list:
1(3) -> 2(1) -> 3(5) -> 4(3) -> 5(2)
Time Complexity: O(2n), as we are traversing the linked list twice. 
Auxiliary Space: O(2n), extra O(n) space as we are using a hash table to store the new nodes.

[Naive Approach - 2] Using Hashing and Recursion- O(n) Time and O(3n) Space
The idea is to create a new node corresponding to each node in the original linked list and store the new nodes in a hash table. While traversing the original linked list we also use recursion to update the next and random pointers of new nodes corresponding to every original node.

For a more detailed solution and code checkout, this article Clone a linked list with next and random pointer using Recursion

Time Complexity: O(n) , where n is the number of nodes in linked list.
Auxiliary Space: O(3n) , extra O(n) space as we are using a hash table to store the new nodes as well for recursion stack space.

[Expected Approach] By Inserting Nodes In-place - O(3n) Time and O(1) Space
The idea is to create duplicate of a node and instead of storing in a separate hash table, we can insert it in between the original node and the next node. Now, we will have new nodes at alternate positions.

Now for a node X its duplicate will be X->next and the random pointer of the duplicate should point to X->random->next (as that is the duplicate of X->random). So, iterate over the entire linked list to update the random pointer of all the cloned nodes and then iterate again to separate the original linked list and the cloned linked list.

Follow the steps mentioned below to implement the idea:

Create the copy of node 1 and insert it between node 1 and node 2 in the original Linked List, create the copy of node 2 and insert it between 2nd and 3rd node and so on. Add the copy of N after the Nth node 
Connect the clone node by updating the random pointers.
Separate the cloned linked list from the original list by updating the next pointers. 

Original linked list:
1(3) -> 2(1) -> 3(5) -> 4(3) -> 5(2)
Cloned linked list:
1(3) -> 2(1) -> 3(5) -> 4(3) -> 5(2)
Time Complexity: O(3n), because we are traversing the linked list three times. 
Auxiliary Space: O(1), as we are storing all the cloned nodes in the original linked list itself, no extra space is required.


