Table of Content

[Naive Approach] By Using Array - O((n+m)*log(n+m)) Time and O(n+m) Space
[Better Approach] Using Recursive Merge - O(n+m) Time and O(n+m) Space
[Efficient Approach] Using Iterative Merge - O(n+m) Time and O(1) Space

[Naive Approach] By Using Array - O((n+m)*log(n+m)) Time and O(n+m) Space
The idea is to merge two sorted linked lists into one sorted linked list. First, the elements from both linked lists are extracted and stored in an array. This allows easy sorting of the values. After sorting, a new linked list is created by sequentially inserting the sorted elements from the array. Finally, the merged sorted linked list is returned.

[Better Approach] Using Recursive Merge - O(n+m) Time and O(n+m) Space
The idea is to merge two sorted linked lists using recursion. The base cases handle the scenarios where one of the lists is empty, in which case the other list is returned directly. In the recursive step, the function compares the data of the current nodes of both lists and attaches the smaller node to the merged list. The function then recursively merges the remaining part of the list. This process continues until both lists are fully merged. This approach eliminates the need for extra space and efficiently merges the lists.

[Efficient Approach] Using Iterative Merge - O(n+m) Time and O(1) Space
The idea is to iteratively merge two sorted linked lists using a dummy node to simplify the process. A current pointer tracks the last node of the merged list. We compare the nodes from both lists and append the smaller node to the merged list. Once one list is fully traversed, the remaining nodes from the other list are appended. The merged list is returned starting from the node after the dummy node. Please refer to Merge two sorted lists with O(1) auxiliary space.

