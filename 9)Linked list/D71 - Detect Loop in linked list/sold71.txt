Given a singly linked list, check if the linked list has a loop (cycle) or not. A loop means that the last node of the linked list is connected back to a node in the same list.

Examples:

Input: head: 1 -> 3 -> 4 -> 3
Output: true

Input: head: 1 -> 8 -> 3 -> 4 -> NULL 
Output: false

Table of Content

[Naive Approach] Using HashSet - O(n) Time and O(n) Space
[Expected Approach] Using Floyd's Cycle-Finding Algorithm - O(n) Time and O(1) Space
[Naive Approach] Using HashSet - O(n) Time and O(n) Space
The idea is to insert the nodes in the Hashset while traversing and whenever a node is encountered that is already present in the hashset (which indicates there's a cycle (loop) in the list) then return true. If the node is NULL, represents the end of Linked List, return false as there is no loop.

Output
true
Time complexity: O(n), where n is the number of nodes in the Linked List.
Auxiliary Space: O(n), n is the space required to store the value in the hash set.

[Expected Approach] Using Floyd's Cycle-Finding Algorithm - O(n) Time and O(1) Space
This idea is to use Floyd's Cycle-Finding Algorithm to find a loop in a linked list. It uses two pointers slow and fast, fast pointer move two steps ahead and slow will move one step ahead at a time.

Follow the steps below to solve the problem:

Traverse linked list using two pointers.
Move one pointer(slow) by one step ahead and another pointer(fast) by two steps ahead.
If these pointers meet at the same node then there is a loop. If pointers do not meet then the linked list doesn't have a loop.

Output
true
Time complexity: O(n), where n is the number of nodes in the Linked List.
Auxiliary Space: O(1). 

